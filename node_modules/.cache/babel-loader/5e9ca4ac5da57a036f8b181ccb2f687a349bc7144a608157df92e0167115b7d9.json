{"ast":null,"code":"import { ref, onMounted, computed } from 'vue';\nimport card from '../compo/CardCompo.vue';\nimport data from '../../assets/data/reserve.json'; // reserve.json 파일\nimport CancelTable from '../compo/CancelTable.vue';\nimport Chart from 'chart.js/auto';\nexport default {\n  __name: 'HomePage',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const todayData = ref([]);\n    const headers = ref(['장소', '시간', '이벤트명', '수용 인원', '취소 요청', '잔여 좌석']);\n    const last7DaysData = ref([]); // 최근 7일 데이터\n\n    const today = new Date().toISOString().split('T')[0];\n\n    // 최근 7일의 데이터 필터터\n    const getLast7DaysData = () => {\n      const todayDate = new Date();\n      const last7Days = [];\n      for (let i = 0; i < 7; i++) {\n        const date = new Date(todayDate);\n        date.setDate(todayDate.getDate() - i);\n        const formattedDate = date.toISOString().split('T')[0];\n        last7Days.push(formattedDate);\n      }\n      last7DaysData.value = data.filter(item => last7Days.includes(item.date));\n    };\n\n    // 날짜별 장소별 예약율 계산\n    const calcurateReserve = () => {\n      const dailyRates = {};\n      last7DaysData.value.forEach(item => {\n        const date = item.date;\n        const venue = item.venue;\n        const reservationRate = item.reservations / item.capacity * 100;\n        if (!dailyRates[date]) {\n          dailyRates[date] = {};\n        }\n        if (!dailyRates[date][venue]) {\n          dailyRates[date][venue] = [];\n        }\n        dailyRates[date][venue].push(reservationRate);\n      });\n\n      // 각 날짜에 2개 이상 예약이 있으면 평균치로 계산\n      const averageRates = {};\n      Object.keys(dailyRates).forEach(date => {\n        averageRates[date] = {};\n        Object.keys(dailyRates[date]).forEach(venue => {\n          const rates = dailyRates[date][venue];\n          const averageRate = rates.reduce((a, b) => a + b, 0) / rates.length;\n          averageRates[date][venue] = averageRate;\n        });\n      });\n      return averageRates;\n    };\n\n    // 차트 데이터 생성\n    const chartData = computed(() => {\n      const dailyVenueRates = calcurateReserve();\n      const dates = Object.keys(dailyVenueRates);\n      const venues = Array.from(new Set(data.map(item => item.venue)));\n      const colorPalette = ['rgba(181,226,250, 1)', 'rgba(120,200,244, 1)', 'rgba(183,239,238, 1)', 'rgba(190,214,246, 1)', 'rgba(130,171,249, 1)', 'rgba(198,207,224, 1)', 'rgba(199,220,230, 1)'];\n      const datasets = venues.map((venue, index) => {\n        return {\n          label: venue,\n          data: dates.map(date => dailyVenueRates[date][venue] || 0),\n          borderColor: colorPalette[index % colorPalette.length],\n          backgroundColor: colorPalette[index % colorPalette.length].replace('1)', '0.2)'),\n          // 배경색은 투명도를 낮추기\n          fill: true\n        };\n      });\n      return {\n        labels: dates,\n        // 가로축 = 7일일\n        datasets: datasets\n      };\n    });\n    onMounted(() => {\n      todayData.value = data.filter(item => item.date === today);\n      getLast7DaysData();\n      const chart_data = document.getElementById('reservationsChart').getContext('2d');\n      new Chart(chart_data, {\n        type: 'line',\n        data: chartData.value,\n        options: {\n          responsive: true,\n          scales: {\n            x: {\n              beginAtZero: true\n            },\n            y: {\n              beginAtZero: true,\n              max: 100 // 예약율을 기준으로 할거라 세로(Y)축은 100%를 기준으로로\n            }\n          }\n        }\n      });\n    });\n    const totalParticipants = computed(() => {\n      return todayData.value.reduce((total, row) => total + row.reservations, 0);\n    });\n    const totalCapacity = computed(() => {\n      return todayData.value.reduce((total, row) => total + row.capacity, 0);\n    });\n    const totalReservations = computed(() => {\n      return todayData.value.reduce((total, row) => total + row.reservations, 0);\n    });\n    const cancelRequests = computed(() => {\n      return todayData.value.reduce((total, row) => total + (row.capacity - row.reservations), 0);\n    });\n    const participationRate = computed(() => {\n      return totalCapacity.value === 0 ? 0 : Math.round(totalParticipants.value / totalCapacity.value * 100);\n    });\n\n    // 예약 비율 계산: 마감임박 이벤트(예약 완료 비율이 90% 이상)\n    const ClosingEvents = computed(() => {\n      return data.filter(event => {\n        const reservationRate = event.reservations / event.capacity * 100;\n        return reservationRate >= 90 && new Date(event.date) > new Date(); // 예약 완료 비율이 90% 이상이고 오늘 이후의 이벤트만\n      }).sort((a, b) => {\n        // 예약 비율을 기준으로 내림차순 정렬\n        const aRate = a.reservations / a.capacity * 100;\n        const bRate = b.reservations / b.capacity * 100;\n        return bRate - aRate;\n      });\n    });\n\n    // 마감임박 이벤트 테이블 헤더\n    const eventHeaders = ref(['No.', '이벤트 명', 'Date', '수용 인원', '잔여 좌석']);\n    const __returned__ = {\n      todayData,\n      headers,\n      last7DaysData,\n      today,\n      getLast7DaysData,\n      calcurateReserve,\n      chartData,\n      totalParticipants,\n      totalCapacity,\n      totalReservations,\n      cancelRequests,\n      participationRate,\n      ClosingEvents,\n      eventHeaders,\n      ref,\n      onMounted,\n      computed,\n      card,\n      get data() {\n        return data;\n      },\n      CancelTable,\n      get Chart() {\n        return Chart;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","card","data","CancelTable","Chart","todayData","headers","last7DaysData","today","Date","toISOString","split","getLast7DaysData","todayDate","last7Days","i","date","setDate","getDate","formattedDate","push","value","filter","item","includes","calcurateReserve","dailyRates","forEach","venue","reservationRate","reservations","capacity","averageRates","Object","keys","rates","averageRate","reduce","a","b","length","chartData","dailyVenueRates","dates","venues","Array","from","Set","map","colorPalette","datasets","index","label","borderColor","backgroundColor","replace","fill","labels","chart_data","document","getElementById","getContext","type","options","responsive","scales","x","beginAtZero","y","max","totalParticipants","total","row","totalCapacity","totalReservations","cancelRequests","participationRate","Math","round","ClosingEvents","event","sort","aRate","bRate","eventHeaders"],"sources":["C:/Users/bs010/portfolioVan/vue-first/dashboard/src/components/pages/HomePage.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <div class=\"content-wrap\">\r\n            <h1 class=\"sub-title\">Today's Reservation</h1>\r\n            <div class=\"summary\">\r\n                <card :title=\"'금일 이벤트 수'\" :number=\"todayData.length\" />\r\n                <div class=\"box\">\r\n                <h3 class=\"box-title\">이벤트 참여 인원</h3>\r\n                <div class=\"parti-wrap\">\r\n                    <div class=\"rate\">{{ participationRate }}%</div>\r\n                    <div class=\"participants\">\r\n                    <span>{{ totalParticipants }}</span> / <span>{{ totalCapacity }}</span>\r\n                    </div>\r\n                </div>\r\n                <div class=\"progress\">\r\n                    <div class=\"progress-bar\" :style=\"{ width: participationRate + '%' }\"></div>\r\n                </div>\r\n                </div>\r\n                <card title=\"금일 예약 완료\" :number=\"totalReservations\" />\r\n                <card title=\"취소 요청건\" :number=\"cancelRequests\" :isRed=\"true\" />\r\n                <div class=\"box\">\r\n                    <h3 class=\"box-title\">인기 이벤트</h3>\r\n                    <h1>강연</h1>\r\n                </div>\r\n            </div>\r\n        </div>\r\n      \r\n        <div class=\"content-wrap\">\r\n            <h1 class=\"sub-title\">금일 이벤트 현황</h1>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                    <th v-for=\"(header, index) in headers\" :key=\"index\">{{ header }}</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr v-for=\"(row, index) in todayData\" :key=\"index\">\r\n                    <td>{{ row.venue }}</td>\r\n                    <td>{{ row.time }}</td>\r\n                    <td>{{ row.eventName }}</td>\r\n                    <td>{{ row.capacity }}</td>\r\n                    <td>{{ row.cancelled }}</td>\r\n                    <td>{{ row.capacity - row.reservations }}</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n  \r\n        <div class=\"grid-wrap content-wrap\">\r\n            <div class=\"left\">\r\n                <h1 class=\"sub-title\">금일 취소 현황</h1>\r\n                <CancelTable/>\r\n            </div>\r\n            <div class=\"right\">\r\n                <h1 class=\"sub-title\">일자별 예약율 (7일)</h1>\r\n                <canvas id=\"reservationsChart\"></canvas>\r\n            </div>\r\n        </div>\r\n        <div class=\"grid-wrap content-wrap\">\r\n            <div class=\"left\">\r\n                <h1 class=\"sub-title\">마감임박 이벤트</h1>\r\n                <table>\r\n            <thead>\r\n                <tr>\r\n                <th v-for=\"(header, index) in eventHeaders\" :key=\"index\">{{ header }}</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr v-for=\"(event, index) in ClosingEvents\" :key=\"index\">\r\n                    <td>{{ index +1 }}</td>\r\n                    <td>{{ event.eventName }}</td>\r\n                    <td>{{ event.date }}</td>\r\n                    <td>{{ event.capacity }}</td>\r\n                    <td>{{ event.capacity - event.reservations }}</td>\r\n                </tr>\r\n            </tbody>\r\n            </table>\r\n            </div>\r\n            <div class=\"right\">\r\n                <h1 class=\"sub-title\">시간대별 예약 트랜드</h1>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    </template>\r\n  \r\n  <script setup>\r\n  import { ref, onMounted, computed } from 'vue';\r\n  import card from '../compo/CardCompo.vue';\r\n  import data from '../../assets/data/reserve.json'; // reserve.json 파일\r\n  import CancelTable from '../compo/CancelTable.vue';\r\n  import Chart from 'chart.js/auto';\r\n  \r\n  const todayData = ref([]);\r\n  const headers = ref(['장소', '시간', '이벤트명', '수용 인원', '취소 요청', '잔여 좌석']);\r\n  const last7DaysData = ref([]); // 최근 7일 데이터\r\n  \r\n  const today = new Date().toISOString().split('T')[0];\r\n  \r\n  // 최근 7일의 데이터 필터터\r\n  const getLast7DaysData = () => {\r\n    const todayDate = new Date();\r\n    const last7Days = [];\r\n  \r\n    for (let i = 0; i < 7; i++) {\r\n      const date = new Date(todayDate);\r\n      date.setDate(todayDate.getDate() - i);\r\n      const formattedDate = date.toISOString().split('T')[0];\r\n      last7Days.push(formattedDate);\r\n    }\r\n  \r\n    last7DaysData.value = data.filter(item => last7Days.includes(item.date));\r\n  };\r\n  \r\n  // 날짜별 장소별 예약율 계산\r\n  const calcurateReserve = () => {\r\n    const dailyRates = {};\r\n  \r\n    last7DaysData.value.forEach(item => {\r\n      const date = item.date;\r\n      const venue = item.venue;\r\n      const reservationRate = (item.reservations / item.capacity) * 100;\r\n  \r\n      if (!dailyRates[date]) {\r\n        dailyRates[date] = {};\r\n      }\r\n      if (!dailyRates[date][venue]) {\r\n        dailyRates[date][venue] = [];\r\n      }\r\n  \r\n      dailyRates[date][venue].push(reservationRate);\r\n    });\r\n  \r\n    // 각 날짜에 2개 이상 예약이 있으면 평균치로 계산\r\n    const averageRates = {};\r\n    Object.keys(dailyRates).forEach(date => {\r\n      averageRates[date] = {};\r\n      Object.keys(dailyRates[date]).forEach(venue => {\r\n        const rates = dailyRates[date][venue];\r\n        const averageRate = rates.reduce((a, b) => a + b, 0) / rates.length;\r\n        averageRates[date][venue] = averageRate;\r\n      });\r\n    });\r\n  \r\n    return averageRates;\r\n  };\r\n  \r\n  // 차트 데이터 생성\r\n  const chartData = computed(() => {\r\n    const dailyVenueRates = calcurateReserve();\r\n    const dates = Object.keys(dailyVenueRates); \r\n    const venues = Array.from(new Set(data.map(item => item.venue))); \r\n  \r\n    const colorPalette = [\r\n    'rgba(181,226,250, 1)', \r\n    'rgba(120,200,244, 1)', \r\n    'rgba(183,239,238, 1)', \r\n    'rgba(190,214,246, 1)', \r\n    'rgba(130,171,249, 1)',\r\n    'rgba(198,207,224, 1)', \r\n    'rgba(199,220,230, 1)', \r\n  ];\r\n\r\n    const datasets = venues.map((venue, index) => {\r\n        return {\r\n        label: venue,\r\n        data: dates.map(date => dailyVenueRates[date][venue] || 0),\r\n        borderColor: colorPalette[index % colorPalette.length], \r\n        backgroundColor: colorPalette[index % colorPalette.length].replace('1)', '0.2)'), // 배경색은 투명도를 낮추기\r\n        fill: true,\r\n        };\r\n    });\r\n  \r\n    return {\r\n      labels: dates, // 가로축 = 7일일\r\n      datasets: datasets,\r\n    };\r\n  });\r\n  \r\n    onMounted(() => {\r\n        todayData.value = data.filter(item => item.date === today);\r\n        getLast7DaysData(); \r\n    \r\n        const chart_data = document.getElementById('reservationsChart').getContext('2d');\r\n        new Chart(chart_data, {\r\n        type: 'line',\r\n        data: chartData.value,\r\n        options: {\r\n            responsive: true,\r\n            scales: {\r\n            x: {\r\n                beginAtZero: true,\r\n            },\r\n            y: {\r\n                beginAtZero: true,\r\n                max: 100, // 예약율을 기준으로 할거라 세로(Y)축은 100%를 기준으로로\r\n            }\r\n            }\r\n        }\r\n        });\r\n    });\r\n  \r\n    const totalParticipants = computed(() => {\r\n        return todayData.value.reduce((total, row) => total + row.reservations, 0);\r\n    });\r\n    \r\n    const totalCapacity = computed(() => {\r\n        return todayData.value.reduce((total, row) => total + row.capacity, 0);\r\n    });\r\n    \r\n    const totalReservations = computed(() => {\r\n        return todayData.value.reduce((total, row) => total + row.reservations, 0);\r\n    });\r\n    \r\n    const cancelRequests = computed(() => {\r\n        return todayData.value.reduce((total, row) => total + (row.capacity - row.reservations), 0);\r\n    });\r\n    \r\n    const participationRate = computed(() => {\r\n        return totalCapacity.value === 0 ? 0 : Math.round((totalParticipants.value / totalCapacity.value) * 100);\r\n    });\r\n\r\n    // 예약 비율 계산: 마감임박 이벤트(예약 완료 비율이 90% 이상)\r\n    const ClosingEvents = computed(() => {\r\n        return data\r\n            .filter(event => {\r\n                const reservationRate = (event.reservations / event.capacity) * 100;\r\n                return reservationRate >= 90 && new Date(event.date) > new Date(); // 예약 완료 비율이 90% 이상이고 오늘 이후의 이벤트만\r\n            })\r\n            .sort((a, b) => {\r\n                // 예약 비율을 기준으로 내림차순 정렬\r\n                const aRate = (a.reservations / a.capacity) * 100;\r\n                const bRate = (b.reservations / b.capacity) * 100;\r\n                return bRate - aRate;\r\n            });\r\n    });\r\n\r\n    // 마감임박 이벤트 테이블 헤더\r\n    const eventHeaders = ref(['No.', '이벤트 명', 'Date', '수용 인원', '잔여 좌석']);\r\n\r\n\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .grid-wrap {\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    gap: 20px;\r\n  }\r\n  \r\n  .summary {\r\n    width: 100%;\r\n    justify-content: space-between;\r\n    display: flex;\r\n    gap: 15px;\r\n  }\r\n  \r\n  .parti-wrap {\r\n    display: flex;\r\n    gap: 10px;\r\n    padding-bottom: 10px;\r\n    width:80%;\r\n    justify-content: space-evenly;\r\n  }\r\n  \r\n  .rate {\r\n    width: 60px;\r\n    height: 60px;\r\n    line-height: 60px;\r\n    border-radius: 100%;\r\n    background-color: orange;\r\n    text-align: center;\r\n    color: white;\r\n  }\r\n  \r\n  .participants {\r\n    line-height: 60px;\r\n  }\r\n  \r\n  .progress {\r\n    width: 80%;\r\n    height: 15px;\r\n    border-radius: 15px;\r\n    background-color: #ccc;\r\n    position: relative;\r\n  }\r\n  \r\n  .progress-bar {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    height: 15px;\r\n    border-radius: 15px;\r\n    border: thin solid #ccc;\r\n    background-color: orange;\r\n    width: 80%;\r\n  }\r\n  \r\n  canvas {\r\n    width: 100%;\r\n    height: 400px;\r\n  }\r\n  </style>\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}